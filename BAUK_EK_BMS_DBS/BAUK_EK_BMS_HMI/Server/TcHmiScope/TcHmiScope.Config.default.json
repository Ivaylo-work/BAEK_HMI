{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "PowerMon": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
    &lt;CSVProperties&gt;
    &lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>3f2abeab-26cd-4de3-8204-2552b36de5cc</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>true</KeepPreviousExports>
  <KeepPreviousImageExports>true</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="1cb945fc-d305-4874-9985-74fd0c32c18c" LastFocused="133438380736982418" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="bdeb1468-03af-4edf-a589-def3bc917d39" DocumentIndexInWindowGroup="2" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="d7e0423f-79f8-4e97-9693-8f800f7745d9" LastFocused="133438380635306526" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="bdeb1468-03af-4edf-a589-def3bc917d39" DocumentIndexInWindowGroup="1" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="e2c291d5-36f3-405f-85d7-ec3f59f9ebb2" LastFocused="133438379314415170" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="bdeb1468-03af-4edf-a589-def3bc917d39" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="d34b5ea4-3502-485b-9a40-90f1a365bede" LastFocused="133438385653027854" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="bdeb1468-03af-4edf-a589-def3bc917d39" DocumentIndexInWindowGroup="3" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="bdeb1468-03af-4edf-a589-def3bc917d39" Collapsed="0" SelectedControl="d34b5ea4-3502-485b-9a40-90f1a365bede"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="e2c291d5-36f3-405f-85d7-ec3f59f9ebb2" /&gt;
          &lt;Control Guid="d7e0423f-79f8-4e97-9693-8f800f7745d9" /&gt;
          &lt;Control Guid="1cb945fc-d305-4874-9985-74fd0c32c18c" /&gt;
          &lt;Control Guid="d34b5ea4-3502-485b-9a40-90f1a365bede" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>6000000000</RecordTime>
  <ServerVersions>
    <Version>3.4.3147.18</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>AutoStop</StopMode>
  <SubMember>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>ce7c005a-b2a8-4328-926f-9bb5d54cc202</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.27.164.190.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>3f01bf45-f21f-4fa3-b6e1-2e479ae48038</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>708360</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>diScaledCurrentAmps</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>P_Scaling.diScaledCurrentAmps</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_85</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.27.164.190.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>5b72b79a-9377-4e00-b727-47491e5eb898</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>708364</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>diScaledActivePower</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>P_Scaling.diScaledActivePower</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_85</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.27.164.190.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>e4ca3930-cbba-4414-8fd5-f24db8f060bc</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>708368</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>diScaledFrequency</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>P_Scaling.diScaledFrequency</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_85</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.27.164.190.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>1fd7e362-7cc1-4510-b3ca-9e7057268ea2</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>708352</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>diScaledVoltage</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>P_Scaling.diScaledVoltage</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_85</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>DataPool_36</Title>
    </DataPool>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>0990fabe-6bc5-49ed-9d3d-03920b7aa29c</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>TriggerModule_48</Title>
    </TriggerModule>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-986896</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-16777216</ForeColor>
      <Guid>e2c291d5-36f3-405f-85d7-ec3f59f9ebb2</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Current</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Silver</DisplayColor>
          <ForeColor>-16777216</ForeColor>
          <Guid>cc030d55-86e5-4435-9ee8-8063536f2ed3</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_52</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>7568bb7f-764b-4032-aaa0-0a48092128d1</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>true</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>1d4c55a9-84eb-4533-98d3-11d1e41c5ca2</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_56</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>6718ad90-9c65-4df3-9baa-10d8f765381e</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_58</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_54</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>020ce8f3-0e43-43a0-8c6f-8907b52fac28</Guid>
          <Name>Marker Container</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_59</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>6c9d2051-01c1-40d3-96a7-5f40ec5ee932</Guid>
          <Name>Current</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>91933073-90c3-49f0-99ba-d002220b134d</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>263de424-38c9-45f7-a7ba-81e6f7c26eba</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>74289e59-27c1-4e58-b7d2-0fae145a668e</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowNShrink</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>4124dd3e-1fc7-4583-baa4-afef14c61e2b</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>True</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Current</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>3052beff-7113-431a-9e34-79791660fbb5</Guid>
              <Name>Marker Container (1)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_71</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16776961</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>d389264e-c736-4df0-ad86-db6cf186e4a0</Guid>
              <Name>Current</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>3f01bf45-f21f-4fa3-b6e1-2e479ae48038</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>2faa41f5-0e17-4eb6-839d-8fa6e3b70063</Guid>
                  <Name>Y: diScaledCurrentAmps</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>4096</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>A</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>4096</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>4096</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText>A (Current) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol>A</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Current</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>4096</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_75</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>cd43c07a-6d4d-4428-85a8-ac736fff673d</Guid>
                  <Name>Channel Style (1)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16776961</DisplayColor>
                      <FillColor>838861055</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>f905d9e6-66af-4de3-99ef-d8e3eb7c3966</Guid>
                      <LineWidth>3</LineWidth>
                      <MarkColor>-16776961</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (1)</Name>
                      <SeriesType>ExtendedLine</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_79</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>9e4f2f82-7187-4df6-8825-7c22d13b00cd</Guid>
                      <Name>Min/Max Style (1)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_97</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>93e7dba8-7da6-417f-9af7-b6e803fb875a</Guid>
                      <Name>TimeShiftStyle_98</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_98</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_77</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <DynamicStyleContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>567de52c-49ac-4e99-9c1a-5e7585e77be2</Guid>
                  <Name>DynamicStyleContainer_100</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>Lime</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>9c6e4d03-ac7b-43e6-898c-4f010573d569</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Dynamic Style</Name>
                      <SortPriority>20</SortPriority>
                      <SubMember>
                        <AreaCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>703dfafa-8278-408b-99d5-f8483e423bd3</Guid>
                          <InterpreterGUID>2faa41f5-0e17-4eb6-839d-8fa6e3b70063</InterpreterGUID>
                          <LowerLimit>0</LowerLimit>
                          <LowerOperator>BiggerOrEqual</LowerOperator>
                          <Name>Low</Name>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Title>AreaCondition_101</Title>
                          <UpperLimit>1.5</UpperLimit>
                          <UpperOperator>Smaller</UpperOperator>
                        </AreaCondition>
                      </SubMember>
                      <Title>DynamicStyle_99</Title>
                    </DynamicStyle>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>-32768</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>03aef876-4d71-484c-8467-7496684a8813</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Dynamic Style (1)</Name>
                      <SortPriority>21</SortPriority>
                      <SubMember>
                        <AreaCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>a5a4ad05-7e0f-4324-8161-d6b3459059b4</Guid>
                          <InterpreterGUID>2faa41f5-0e17-4eb6-839d-8fa6e3b70063</InterpreterGUID>
                          <LowerLimit>1.5</LowerLimit>
                          <LowerOperator>BiggerOrEqual</LowerOperator>
                          <Name>Medium</Name>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Title>AreaCondition_105</Title>
                          <UpperLimit>3</UpperLimit>
                          <UpperOperator>Smaller</UpperOperator>
                        </AreaCondition>
                      </SubMember>
                      <Title>DynamicStyle_104</Title>
                    </DynamicStyle>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>Red</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>334cdbb7-42ed-4c6e-9438-b39242237174</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Dynamic Style (2)</Name>
                      <SortPriority>22</SortPriority>
                      <SubMember>
                        <ThresholdCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>94cb104d-a040-4f82-9cef-fb688d458293</Guid>
                          <InterpreterGUID>2faa41f5-0e17-4eb6-839d-8fa6e3b70063</InterpreterGUID>
                          <Name>Condition</Name>
                          <Operator>Bigger</Operator>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Threshold>3</Threshold>
                          <Title>ThresholdCondition_108</Title>
                        </ThresholdCondition>
                      </SubMember>
                      <Title>DynamicStyle_106</Title>
                    </DynamicStyle>
                  </SubMember>
                  <Title>DynamicStyleContainer_100</Title>
                </DynamicStyleContainer>
              </SubMember>
              <Title>Channel_73</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_51</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-986896</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-16777216</ForeColor>
      <Guid>d7e0423f-79f8-4e97-9693-8f800f7745d9</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Power</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>11</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <ForeColor>-16777216</ForeColor>
          <Guid>6f24b338-5797-45ab-ae4e-b287bb1a05af</Guid>
          <Name>Overview Chart (1)</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_127</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>3fa7e01b-743a-4171-b3dc-b825dfa89218</Guid>
          <Name>Chart Style (1)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>d8b016fa-6fd2-43c9-8c6a-44a42841eb3c</Guid>
              <Name>Chartzoom Style (1)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_56</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>be558f7e-eb9d-44cb-925f-6806c570d85e</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (1)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_58</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_54</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>4a721064-ce23-4b33-aa9a-3848baecda32</Guid>
          <Name>Marker Container (2)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_131</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>48c1741e-a0fc-4f74-88be-164bf8c0bf3b</Guid>
          <Name>Power</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>f23d1ba8-3db6-4a3c-9bc2-c3e23480b2ea</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (1)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>04bc2d50-550a-484d-84cc-2e8034da62e8</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>8de487f7-ac6f-4679-9de7-171afbbd0010</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowNShrink</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>5cbe939a-a8a7-4680-9ae3-33e996d42d41</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (3)</Name>
                  <Precision>6</Precision>
                  <ShowName>True</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Active Power</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>c62449ed-3266-44c8-b435-80423b58ec62</Guid>
              <Name>Marker Container (3)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_137</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>White</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>a98c893a-4f00-4123-8dbb-52268ab0730a</Guid>
              <Name>Activate Power</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>5b72b79a-9377-4e00-b727-47491e5eb898</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>dad67a34-83c8-4ae4-8dfd-ba6aa5a60bd7</Guid>
                  <Name>Y: diScaledActivePower</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>3346</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>kilo</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>W</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>3346</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>3346</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>kilo</Prefix>
                      <ReturnText>kW (Power) </ReturnText>
                      <ScaleFactor>1000</ScaleFactor>
                      <Symbol>W</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Power</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>3346</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_75</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>bddd43d0-9371-4b31-bc1b-19b5d09c876d</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>White</DisplayColor>
                      <FillColor>855638015</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>5f2778c5-7121-4a9e-835a-f2b9f7989bce</Guid>
                      <LineWidth>3</LineWidth>
                      <MarkColor>White</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_79</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>00ac4706-1c95-40e1-9c2c-d647fa302cc1</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_143</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>4049cc63-33e4-40ac-83e7-fd46489aebd1</Guid>
                      <Name>TimeShiftStyle_144</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_144</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_77</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_73</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_51</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-986896</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-16777216</ForeColor>
      <Guid>1cb945fc-d305-4874-9985-74fd0c32c18c</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Voltage</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>13</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <ForeColor>-16777216</ForeColor>
          <Guid>63372cc0-b126-4add-977a-18f9824b4bc3</Guid>
          <Name>Overview Chart (3)</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_164</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>0ed05fb6-16d4-40f3-811b-7cd5643f363b</Guid>
          <Name>Chart Style (3)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>e7eac1bf-a2f4-4e67-8db3-340d1aed85ca</Guid>
              <Name>Chartzoom Style (3)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_56</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>97d012d0-2ef5-478f-8d2e-f44c5489b375</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (3)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_58</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_54</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>4c6efc1b-6e13-467e-b4af-7354357bad09</Guid>
          <Name>Marker Container (6)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_168</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>09225409-bd68-4ce8-a9a0-0c7df88e64a0</Guid>
          <Name>Voltage</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>0fa59c18-3934-4f41-8022-93bd33b734bc</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (2)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>b7d20dcf-f712-4a08-8186-9bb2b5ad9fde</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (5)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>b83f221b-8eff-49e3-a3c9-52802dca3219</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (3)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowNShrink</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>8cfb60a7-6e05-42b2-a29e-c8468ac5c367</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (6)</Name>
                  <Precision>6</Precision>
                  <ShowName>True</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Voltage</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>12d75042-ed52-4f7c-b0c1-3a33ecb00ed4</Guid>
              <Name>Marker Container (7)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_174</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>89d00d57-0d9a-4506-bf89-89d423be9bcb</Guid>
              <Name>Voltage</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>1fd7e362-7cc1-4510-b3ca-9e7057268ea2</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>1a373515-0df7-4152-90f8-55be3ec5037d</Guid>
                  <Name>Y: diScaledVoltage</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>64786</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>V</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>64786</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>64786</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText>V (Voltage) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol>V</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Voltage</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>64786</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_75</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>e71ecde3-6387-417a-9d05-a858ac804095</Guid>
                  <Name>Channel Style (3)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>123b4e4a-c4ce-46a2-8678-c8b724dc844a</Guid>
                      <LineWidth>3</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (3)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_79</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>61545356-e6df-4eb1-a186-ac30bc3ff96b</Guid>
                      <Name>Min/Max Style (3)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_180</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>884ba3a5-11de-46a3-8af0-724ec48e04bf</Guid>
                      <Name>TimeShiftStyle_181</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_181</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_77</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_73</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_51</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-986896</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-16777216</ForeColor>
      <Guid>d34b5ea4-3502-485b-9a40-90f1a365bede</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Frequency</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>14</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <ForeColor>-16777216</ForeColor>
          <Guid>454e034f-2be5-497c-a838-aa6912ecd102</Guid>
          <Name>Overview Chart (2)</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_194</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>347f017d-639f-494d-9f63-54e168e9dcf9</Guid>
          <Name>Chart Style (2)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>8d5e00a0-ba40-4496-8a40-cc4b4a61fadc</Guid>
              <Name>Chartzoom Style (2)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_56</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>7117c2dc-6d41-4097-97a4-4ee0f0184b55</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (2)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_58</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_54</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>d5285943-2dec-4a8c-b1b8-594cb3a6e154</Guid>
          <Name>Marker Container (4)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_198</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-1</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>446da09a-6972-4401-8aea-669b0d338e3b</Guid>
          <Name>Frequency</Name>
          <ShowTitle>Name</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>21f4e4eb-b66e-43ef-94e9-b5ca5a019f50</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (3)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>43a59f0f-7374-4959-8bac-7aaed7b75a1d</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (4)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>7bfda6f1-535a-4305-aa75-1133304e389a</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (2)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-16777216</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-16777216</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>a4870ff2-09d2-4e1d-9a31-4107b6af9654</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (7)</Name>
                  <Precision>6</Precision>
                  <ShowName>True</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_66</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Frequency</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>0c334d0a-b5c8-438d-a3ea-cf818f01daae</Guid>
              <Name>Marker Container (5)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_204</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-23296</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>5dcf054e-d6ee-453c-b105-67e7140212b2</Guid>
              <Name>Frequency</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>e4ca3930-cbba-4414-8fd5-f24db8f060bc</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>707f26ec-6a2d-430d-bfa4-977e78feb67e</Guid>
                  <Name>Y: diScaledFrequency</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_75</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>a2ee92af-fdff-493a-ad7c-f3d4239dbfae</Guid>
                  <Name>Channel Style (2)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-23296</DisplayColor>
                      <FillColor>855614720</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>0a5ec9eb-3f61-43b6-8d4d-336a18cb0fce</Guid>
                      <LineWidth>3</LineWidth>
                      <MarkColor>-23296</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (2)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_79</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>e6ed2161-d345-4bbf-bc50-66e00cdb4076</Guid>
                      <Name>Min/Max Style (2)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_210</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>ddec1ab3-585b-4982-ac11-1fc7e8b28a1f</Guid>
                      <Name>TimeShiftStyle_211</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_211</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_77</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_73</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_51</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>ScopeProject_3</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.3</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "../BAUK_EK_BMS_SCOPE/Analogue_Power.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}