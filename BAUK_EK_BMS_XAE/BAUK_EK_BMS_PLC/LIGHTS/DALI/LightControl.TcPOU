<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="LightControl" Id="{476dfd26-e722-485f-867b-053377d66b3d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM LightControl
VAR
	
	//Force Variables
	TurnAllOff								:	BOOL;
	TurnAllOn								:	BOOL;
	Bypass									:	BOOL;
	
	//UPdate light status pulse
	Update									:	INT;	
	
	//Set Min Or Max Levels
	SetMaxLevel								:	FB_DALIV2SetMaxLevel;
	xExecuteSetMax							:	BOOL;
	MaxSetting								:	BYTE := 255;
	SetMinLevel								:	FB_DALIV2SetMinLevel;
	xExecuteSetMin							:	BOOL;
	MinSetting								:	BYTE := 76;	
  	DaliAddrress							:	BYTE;
	                                    	
                                        	
                                        	
	//Group Light OFF control           	
	TurnAllOffGroup0_MiddleRoom				:	FB_DALIV2Off;		
	TurnAllOffGroup1_OfficeDesks			:	FB_DALIV2Off;
	TurnAllOffGroup2_BoardroomBackRow		:	FB_DALIV2Off;
	TurnAllOffGroup3_BoardroomFront2		:	FB_DALIV2Off;
	TurnAllOffGroup4_OfficePassage			:	FB_DALIV2Off;
	TurnAllOffGroup5_TableTennis			:	FB_DALIV2Off;
	TurnAllOffGroup6_MiddleRoomPassage		:	FB_DALIV2Off;
	TurnAllOffGroup7_TechRoom				:	FB_DALIV2Off;
	TurnAllOffGroup8_ServerRoom				:	FB_DALIV2Off;
	
	
	//Light Control Per Group
	LightControlGroup0_MiddleRoom			:	FB_DALIV2Light;
	LightControlGroup1_OfficeDesks			:	FB_DALIV2Light;
	LightControlGroup2_BoardroomBackRow		:	FB_DALIV2Light;
	LightControlGroup3_BoardroomFront2		:	FB_DALIV2Light;
	LightControlGroup4_OfficePassage		:	FB_DALIV2Light;
	LightControlGroup5_TableTennis			:	FB_DALIV2Light;
	LightControlGroup6_MiddleRoomPassage	:	FB_DALIV2Light;
	LightControlGroup7_TechRoom				:	FB_DALIV2Light;
	LightControlGroup8_ServerRoom			:	FB_DALIV2Light;
	
	//Recall Max Level			
	RecallMaxLevelGroup0_MiddleRoom			:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup1_OfficeDesks		:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup2_BoardroomBackRow	:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup3_BoardroomFront2	:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup4_OfficePassage		:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup5_TableTennis		:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup6_MiddleRoomPassage	:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup7_TechRoom			:	FB_DALIV2RecallMaxLevel;
	RecallMaxLevelGroup8_ServerRoom			:	FB_DALIV2RecallMaxLevel;
	
	//Recall Min Level		
	//Groups	
	RecallMinLevelGroup0_MiddleRoom			:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup1_OfficeDesks		:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup2_BoardroomBackRow	:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup3_BoardroomFront2	:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup4_OfficePassage		:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup5_TableTennis		:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup6_MiddleRoomPassage	:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup7_TechRoom			:	FB_DALIV2RecallMinLevel;
	RecallMinLevelGroup8_ServerRoom			:	FB_DALIV2RecallMinLevel;
	
	//Individual Lamps
	RecallMinLevelCouchLight				:	FB_DALIV2RecallMinLevel;
	RecallStepUPCouchLight					:	FB_DALIV2StepUp;
	
	IgnoreFronttime : ton;
	
	

	nForceLightsOffHour						:	INT := 19;	// Lights will turn off at this time
	nHourOfDay								:	INT;
	bNoOccupancyFlag						:	BOOL;
	trigbAssumeBuildingEmpty				:	R_TRIG;
	i										:	BYTE;
                                        	
	FBDALIV2Dimmer1SwitchStaff				:	FB_DALIV2Dimmer1Switch;
	FBDALIV2Dimmer1SwitchBoarda				:	FB_DALIV2Dimmer1Switch;	
	FBDALIV2Dimmer1SwitchBoardb				:	FB_DALIV2Dimmer1Switch;
	FBDALIV2Dimmer1SwitchBoardc				:	FB_DALIV2Dimmer1Switch;
	FBDALIV2Dimmer1SwitchBoardd				:	FB_DALIV2Dimmer1Switch;
	FBDALIV2Dimmer1SwitchBoarde				:	FB_DALIV2Dimmer1Switch;
	FBDALIV2Dimmer1SwitchBoardf				:	FB_DALIV2Dimmer1Switch;
				                        	
	                                    	
	                                    	
	OfficeDimmValue							:	BYTE := 190;	
	WorkshopDimmValue						:	BYTE := 190;
	                                    	
	FBFade									:	FB_DALIV2Ramp;
	
	FBFadeOffice							:	FB_DALIV2Dimmer1Switch;
	FBFadeWorkshop							:	FB_DALIV2Dimmer1Switch;
		
	bMainEntranceFadeSetFlag				:	BOOL;
	nEndLevelIn								:	BYTE;
	MainEntTimer							:	TON;
	OfficeTimer								:	TON;
	                                    	
	bMainOfficeFadeSetFlag					: 	BOOL;       	
	                                    	
	OfficeLightControl						:	FB_ConstantLightControlEco;
	WorkshopLightControl					:	FB_ConstantLightControlEco;
	OfficePassageLightControl				:	FB_DALIV2Light;
	ServerRoomLightControl					:	FB_DALIV2Light;
	                                    	
	EmergancyLightControlOffice				:	FB_DALIV2RecallMaxLevel;
	EmergancyLightControlBoard				:	FB_DALIV2Light;
	EmergancyLightControlReception			:	FB_DALIV2Light;
	
	ReceptionDoorLightControl				:	FB_DALIV2Light;
	ReceptionPassageLightControl			:	FB_DALIV2Light;
	ReceptionTableKitchLoungeLightControl	:	FB_DALIV2Light;
	
	ReceptionDoorLightControlOnLeave		:	FB_DALIV2Light;
	
	
	TableTennisLightControl					:	FB_DALIV2Light;
	TableTennisDimm							:	FB_DALIV2Dimmer1Switch;
	TableTennisOff							:	FB_DALIV2Off;
	                                    	
	                                    	
	OfficePassageTime						:	TON;
	OfficePassageTriggerOn					:	BOOL;
	OfficePassageTriggerOff					:	BOOL;	
	                                    	
	WorkshopPassageTime						:	TON;
	WorkshopPassageTriggerOn				:	BOOL;
	WorkshopPassageTriggerOff				:	BOOL;
	                                    	
	DeskAreaTime							:	TON;
	DeskAreaTriggerOn						:	BOOL;
	DeskAreaTriggerOff						:	BOOL;
	                                    	
	OfficeLightLevel						:	UINT;
	WorkshopLightLevel						:	UINT;
	
	BoardRoomTime							:	Ton;
	BoardRoomTriggerOn						:	BOOL;
	BoardRoomTriggerOff						:	BOOL;
	
	
	bLightADS 					AT %MB100	:	BOOL;
	bLightsADSOff 				AT %MB110 	:	BOOL;
	

	ReceptionDoorTriggerOn					:	BOOL;
	ReceptionDoorTriggerOFF					:	BOOL;
	
	ReceptionPassageTriggerOn				:	BOOL;
	ReceptionPassageTriggerOFF				:	BOOL;
	                                		 	
		                            		 	
	                                		 	
	ReceptionDoorTime						:	TON;
	ReceptionPassageTime					:	TON;
	ReceptionTableKitchLoungeTime			:	TON;
	                                		 	
	
	GoHomeHold 								:	TON;
	GoHomeHoldActivated						:	BOOL;
	ClearRoomTimer							:	TON;
	

	
	ResetOthers								:	BOOL;
	ReceptionTableKitchLoungeTriggerOn		:	BOOL;
	ReceptionTableKitchLoungeTriggerOFF		:	BOOL;
	
	OfficeLightLevelSetpoint				:	UINT := 900;
	WorkshopLightLevelSetpoint				:	UINT := 1000;
	
	xBoardToom_Lights_ProjectorMode			:	BOOL;
	xBoardToom_Lights_ShowroomMode			:	BOOL;
	rt_BoardRoom_Lights_ProjectorMode		:	R_TRIG;
	rt_BoardRoom_Lights_ShowroomMode		:	R_TRIG;
	
	rt_BoardRoom_Lights_Switch0				:	R_TRIG := (CLK := PTM200StrippedTables[0].Signal);
	rt_BoardRoom_Lights_Switch1				:	R_TRIG := (CLK := PTM200StrippedTables[1].Signal);
	rt_BoardRoom_Lights_Switch2				:	R_TRIG := (CLK := PTM200StrippedTables[2].Signal);
	rt_BoardRoom_Lights_Switch3				:	R_TRIG := (CLK := PTM200StrippedTables[3].Signal);
	
	TurnOnCabinetLights						:	BOOL;
	IgnoreFront								:	BOOL;
	
	CouchLightStepUp: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Reset
ReceptionDoorLightControlOnLeave(bOn:= FALSE, bOff:= FALSE,	nAddr:= 24, eAddrType:= 0,stCommandBuffer:= stCommandBuffer);

//Individual Light Control via tLigthTable for direct testing	
FOR i := 0 TO 57 DO
	FBDALIV2Light[i](
			bOn:= tLightTable[i].bOn, 
			bOff:= tLightTable[i].bOff, 
			bToggle:= tLightTable[i].bToggle, 
			nAddr:= i ,
			eAddrType:= 0, 
			nMasterDevAddr:= , 
			tCycleActualLevelMasterDev:= , 
			bLight=> tLightTable[i].LigthStatus, 
			bBusy=> , 
			bError=> , 
			nErrorId=> , 
			stCommandBuffer:= stCommandBuffer);
END_FOR

Update := Update + 1;

(*FOR i := 0 TO 57 DO
	FBDALIV2QueryLightState[i](	
						bStart := update.0,
						nAddr := i,	
						eAddrType := 0,
						bLampPowerOn => tLightTable[i].LigthStatus,
						stCommandBuffer:= stCommandBuffer);
END_FOR	*)

	//force vars
	IF TurnAllOn THEN
	TurnAllOn := FALSE;
	
	LightControlGroup0_MiddleRoom		(bOn:= TRUE, bOff:= , nAddr:= 0, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup1_OfficeDesks		(bOn:= TRUE, bOff:= , nAddr:= 1, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup2_BoardroomBackRow	(bOn:= TRUE, bOff:= , nAddr:= 2, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup3_BoardroomFront2	(bOn:= TRUE, bOff:= , nAddr:= 3, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup4_OfficePassage	(bOn:= TRUE, bOff:= , nAddr:= 4, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup5_TableTennis		(bOn:= TRUE, bOff:= , nAddr:= 5, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup6_MiddleRoomPassage(bOn:= TRUE, bOff:= , nAddr:= 6, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup7_TechRoom			(bOn:= TRUE, bOff:= , nAddr:= 7, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup8_ServerRoom		(bOn:= TRUE, bOff:= , nAddr:= 8, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	
	xXplanarScreenPowerOn := TRUE;
	
	TurnAllOffGroup0_MiddleRoom			(bStart:= FALSE , nAddr:= 0, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup1_OfficeDesks		(bStart:= FALSE , nAddr:= 1, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	TurnAllOffGroup2_BoardroomBackRow	(bStart:= FALSE , nAddr:= 2, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup3_BoardroomFront2	(bStart:= FALSE , nAddr:= 3, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup4_OfficePassage		(bStart:= FALSE , nAddr:= 4, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup5_TableTennis		(bStart:= FALSE , nAddr:= 5, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup6_MiddleRoomPassage	(bStart:= FALSE , nAddr:= 6, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup7_TechRoom			(bStart:= FALSE , nAddr:= 7, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	TurnAllOffGroup8_ServerRoom			(bStart:= FALSE , nAddr:= 8, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
		
	ELSIF TurnAllOFF THEN
	TurnAllOFF := FALSE;	
	LightControlGroup0_MiddleRoom		(bOn:= FALSE, bOff:= , nAddr:= 0, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup1_OfficeDesks		(bOn:= FALSE, bOff:= , nAddr:= 1, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup2_BoardroomBackRow	(bOn:= FALSE, bOff:= , nAddr:= 2, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup3_BoardroomFront2	(bOn:= FALSE, bOff:= , nAddr:= 3, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup4_OfficePassage	(bOn:= FALSE, bOff:= , nAddr:= 4, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup5_TableTennis		(bOn:= FALSE, bOff:= , nAddr:= 5, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup6_MiddleRoomPassage(bOn:= FALSE, bOff:= , nAddr:= 6, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup7_TechRoom			(bOn:= FALSE, bOff:= , nAddr:= 7, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	LightControlGroup8_ServerRoom		(bOn:= FALSE, bOff:= , nAddr:= 8, eAddrType:= 1,	bLight=> ,stCommandBuffer:= stCommandBuffer);
	
	xXplanarScreenPowerOff := TRUE;
	
	TurnAllOffGroup0_MiddleRoom			(bStart:= TRUE , nAddr:= 0, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup1_OfficeDesks		(bStart:= TRUE , nAddr:= 1, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	TurnAllOffGroup2_BoardroomBackRow	(bStart:= TRUE , nAddr:= 2, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup3_BoardroomFront2	(bStart:= TRUE , nAddr:= 3, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup4_OfficePassage		(bStart:= TRUE , nAddr:= 4, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup5_TableTennis		(bStart:= TRUE , nAddr:= 5, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup6_MiddleRoomPassage	(bStart:= TRUE , nAddr:= 6, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup7_TechRoom			(bStart:= TRUE , nAddr:= 7, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	TurnAllOffGroup8_ServerRoom			(bStart:= TRUE , nAddr:= 8, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	
	END_IF

IF Bypass THEN
	RETURN;
END_IF

//Set Min or Max for individual lamp ******************************************
	SetMaxLevel(bStart:= xExecuteSetMax, nAddr:= DaliAddrress, eAddrType:= 0, nMaxLevel:= MaxSetting, stCommandBuffer:= stCommandBuffer);

	SetMinLevel(bStart:= xExecuteSetMin, nAddr:= DaliAddrress, eAddrType:= 0, nMinLevel:= MinSetting, stCommandBuffer:= stCommandBuffer);
//******************************************************************************

//Force Lights off after this time*****************************************************************************
GoHomeHold();
ClearRoomTimer();
trigbAssumeBuildingEmpty(CLK := Dali.bAssumeBuildingEmpty);

IF bNoOccupancyFlag THEN
	ResetOthers := FALSE;
	bNoOccupancyFlag := FALSE;
END_IF

IF trigbAssumeBuildingEmpty.Q THEN
	ResetOthers := TRUE;
	TurnAllOffGroup0_MiddleRoom			(bStart:= TRUE , nAddr:= 0, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup1_OfficeDesks		(bStart:= TRUE , nAddr:= 1, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	TurnAllOffGroup2_BoardroomBackRow	(bStart:= TRUE , nAddr:= 2, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup3_BoardroomFront2	(bStart:= TRUE , nAddr:= 3, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup4_OfficePassage		(bStart:= TRUE , nAddr:= 4, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup5_TableTennis		(bStart:= TRUE , nAddr:= 5, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup6_MiddleRoomPassage	(bStart:= TRUE , nAddr:= 6, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup7_TechRoom			(bStart:= TRUE , nAddr:= 7, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	TurnAllOffGroup8_ServerRoom			(bStart:= TRUE , nAddr:= 8, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	
	xXplanarScreenPowerOff := TRUE;
	
	DeskAreaTriggerOn 			:= FALSE;
	DeskAreaTriggerOff 			:= FALSE;
	WorkshopPassageTriggerOn 	:= FALSE;
	WorkshopPassageTriggerOff 	:= FALSE;
	OfficePassageTime.IN		:= FALSE;
	WorkshopPassageTime.IN		:= FALSE;
	
	bNoOccupancyFlag := TRUE;
	
END_IF



IF PTM200StrippedTables[5].Signal THEN  // hold in to turn off all before going home
	
	IF  EnOcean.AllWindowsClosed  THEN
	
		GoHomeHold.IN := TRUE;	
		GoHomeHold.PT := T#2S;	
			IF GoHomeHold.Q THEN
				GoHomeHold.IN := FALSE;	
				GoHomeHoldActivated := TRUE;
			END_IF	
		xSleepMode := TRUE;		
		
	ELSE
		
		AWindowIsOpenLightTrigger := TRUE;
			
	END_IF		
		
END_IF

IF NOT PTM200StrippedTables[5].Signal AND NOT GoHomeHoldActivated THEN
	GoHomeHold.IN := FALSE;
	TurnAllOffGroup0_MiddleRoom			(bStart:= FALSE , nAddr:= 0, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup1_OfficeDesks		(bStart:= FALSE , nAddr:= 1, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	TurnAllOffGroup2_BoardroomBackRow	(bStart:= FALSE , nAddr:= 2, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup3_BoardroomFront2	(bStart:= FALSE , nAddr:= 3, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup4_OfficePassage		(bStart:= FALSE , nAddr:= 4, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup5_TableTennis		(bStart:= FALSE , nAddr:= 5, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup6_MiddleRoomPassage	(bStart:= FALSE , nAddr:= 6, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup7_TechRoom			(bStart:= FALSE , nAddr:= 7, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	TurnAllOffGroup8_ServerRoom			(bStart:= FALSE , nAddr:= 8, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );

END_IF

IF GoHomeHoldActivated THEN // Go home swicth has been held
	IgnoreFront := TRUE;
	IgnoreFronttime.IN := IgnoreFront;
	ResetOthers := TRUE;
	
	TurnAllOffGroup0_MiddleRoom			(bStart:= TRUE , nAddr:= 0, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup1_OfficeDesks		(bStart:= TRUE , nAddr:= 1, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );		
	TurnAllOffGroup2_BoardroomBackRow	(bStart:= TRUE , nAddr:= 2, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup3_BoardroomFront2	(bStart:= TRUE , nAddr:= 3, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup4_OfficePassage		(bStart:= TRUE , nAddr:= 4, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup5_TableTennis		(bStart:= TRUE , nAddr:= 5, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup6_MiddleRoomPassage	(bStart:= TRUE , nAddr:= 6, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );
	TurnAllOffGroup7_TechRoom			(bStart:= TRUE , nAddr:= 7, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	TurnAllOffGroup8_ServerRoom			(bStart:= TRUE , nAddr:= 8, eAddrType:= 1, stCommandBuffer:= stCommandBuffer );	
	
	xXplanarScreenPowerOff := TRUE;

	DeskAreaTriggerOn 			:= FALSE;
	DeskAreaTriggerOff 			:= FALSE;
	WorkshopPassageTriggerOn 	:= FALSE;
	WorkshopPassageTriggerOff 	:= FALSE;
	OfficePassageTime.IN		:= FALSE;
	WorkshopPassageTime.IN		:= FALSE;
		
	ClearRoomTimer.IN := TRUE;
	ClearRoomTimer.pt := T#100S;
	
	GoHomeHoldActivated := FALSE;
	
	//DMX off
	TurnOnCabinetLights	:= FALSE;
	
END_IF


IgnoreFronttime.pt := T#1S;
IgnoreFronttime();

IF IgnoreFronttime.Q THEN
	IgnoreFronttime.IN := FALSE;
	IgnoreFronttime();
	ReceptionDoorLightControlOnLeave(bOn:= TRUE, bOff:= FALSE,	nAddr:= 24, eAddrType:= 0,stCommandBuffer:= stCommandBuffer);
END_IF

IF ClearRoomTimer.Q THEN
	IgnoreFront := FALSE;
	IgnoreFronttime.IN := FALSE;
	ClearRoomTimer.IN := FALSE;
	ResetOthers := FALSE;
	ReceptionDoorLightControlOnLeave(bOn:= FALSE, bOff:= TRUE,	nAddr:= 24, eAddrType:= 0,stCommandBuffer:= stCommandBuffer);
END_IF


MainEntTimer(IN:= , PT:= T#3600S, Q=> , ET=> );  
OfficeTimer(IN:= , PT:= T#3600S, Q=> , ET=> );  
ReceptionDoorTime(); 
OfficePassageTime();
WorkshopPassageTime();
DeskAreaTime();
BoardRoomTime();

			
//Reception Area**********************************************************
ReceptionDoor_LightControl();
ReceptionPassage_LightControl();



//Dimm Staff Office***************************************************************************
	FBDALIV2Dimmer1SwitchStaff(
	bSwitchDimm:= , 
	bOn:= PTM200StrippedTables[7].Signal, 
	bOff:= PTM200StrippedTables[5].Signal, 
	bSetDimmValue:= , 
	nDimmValue:= , 
	tSwitchOverTime:= , 
	tCycleDelay:= , 
	bMemoryModeOn:= , 
	nOnValueWithoutMemoryMode:= , 
	nAddr:= 1, 
	eAddrType:= 1, 
	nMasterDevAddr:= , 
	nMinLevelMasterDev:= , 
	nMaxLevelMasterDev:= , 
	tCycleActualLevelMasterDev:= , 
	nActualLevelMasterDev=> , 
	bBusy=> , 
	bError=> , 
	nErrorId=> , 
	stCommandBuffer:= stCommandBuffer );

	IF PTM200StrippedTables[6].Signal AND FBDALIV2Dimmer1SwitchStaff.nDimmValue < 254  THEN
		FBDALIV2Dimmer1SwitchStaff.nDimmValue := FBDALIV2Dimmer1SwitchStaff.nDimmValue + 1;
	END_IF		
	
	IF PTM200StrippedTables[4].Signal AND FBDALIV2Dimmer1SwitchStaff.nDimmValue > 0  THEN
		FBDALIV2Dimmer1SwitchStaff.nDimmValue := FBDALIV2Dimmer1SwitchStaff.nDimmValue - 1;
	END_IF	

//Office Light Control***********************************************************************

	//Desk area light control 
	OfficeLightControl(
		bEnable:= TRUE, 
		bOn:= DeskAreaTriggerOn (*PTM200StrippedTables[7].Signal*), 
		bOff:= DeskAreaTriggerOff (*PTM200StrippedTables[5].Signal*), 
		bToggle:= , 
		nSetpointValue:= OfficeLightLevelSetpoint, 
		nActualValue:= Dali.StaffroomPIR_2_LuxLevel, 
		nHysteresis:= 50, 
		nMaxLevel:= 245, 					//250
		nMinLevel:= 10, 
		nStepSize:= 1, 
		tDeadTime:= T#2S, 
		nOptions:= , 
		nDeviation=> , 
		bControllerIsActive=> , 
		bBusy=> , 
		bError=> , 
		nErrorId=> , 
		nLightLevel:= OfficeLightLevel );
		
		FBFadeOffice(
			nDimmValue:= UINT_TO_BYTE(OfficeLightLevel), 
			nAddr:= 1, 
			eAddrType:= 1, 
			stCommandBuffer:= stCommandBuffer);
			
	/////////////////////////// Desk area Occupancy handle //////////////////////////
	IF 	Dali.StaffroomPIR_2_Occupancy  THEN
		DeskAreaTriggerOn 		:= TRUE;
		DeskAreaTriggerOff		:= FALSE;
		DeskAreaTime.IN			:= FALSE;
	END_IF
	
	IF NOT Dali.StaffroomPIR_2_Occupancy THEN
		DeskAreaTime.IN			:= TRUE;
		DeskAreaTime.PT			:= T#1H;	
	END_IF
	
	IF DeskAreaTime.Q OR ResetOthers THEN
		DeskAreaTriggerOn 		:= FALSE;
		DeskAreaTriggerOff		:= TRUE;
	END_IF
	////////////////////////////////////////////////////////////////////////////////////			
		
	//Workshop and server room light control***************************************************************
		LightControlGroup7_TechRoom(
							bOn:= WorkshopPassageTriggerOn, 
							bOff:= WorkshopPassageTriggerOff, 
							nAddr:= 7, 
							eAddrType:= 1, 
							bLight=> , 
							stCommandBuffer:= stCommandBuffer );	
							
		LightControlGroup8_ServerRoom(
							bOn:= WorkshopPassageTriggerOn, 
							bOff:= WorkshopPassageTriggerOff, 
							nAddr:= 8, 
							eAddrType:= 1, 
							bLight=> , 
							stCommandBuffer:= stCommandBuffer );
			
	/////////////////////////// Workshop Passage Occupancy handle //////////////////////////
	IF 	Dali.StaffroomPIR_1_Occupancy  THEN
		WorkshopPassageTriggerOn 		:= TRUE;
		WorkshopPassageTriggerOff		:= FALSE;
		WorkshopPassageTime.IN			:= FALSE;
	END_IF
	
	IF  NOT Dali.StaffroomPIR_1_Occupancy THEN
		WorkshopPassageTime.IN			:= TRUE;
		WorkshopPassageTime.PT			:= T#1H;	
	END_IF
	
	IF WorkshopPassageTime.Q OR ResetOthers THEN

		WorkshopPassageTriggerOn 		:= FALSE;
		WorkshopPassageTriggerOff		:= TRUE;
	END_IF
	////////////////////////////////////////////////////////////////////////////////////		
			
	
//Office passge light control**********************************************************
		OfficePassageLightControl(
			bOn:= OfficePassageTriggerOn, 
			bOff:= OfficePassageTriggerOFF,
			nAddr:= 4, 
			eAddrType:= 1, 
			nMasterDevAddr:= , 
			tCycleActualLevelMasterDev:= , 
			stCommandBuffer:= stCommandBuffer);	
			
				

//Table Tennis Group 5**********************************************************
LightControlGroup5_TableTennis(
			bOn:= PTM200StrippedTables[12].Signal, 
			bOff:= ,
			nAddr:= 5, 
			eAddrType:= eDALIV2AddrTypeGroup, 
			stCommandBuffer:= stCommandBuffer);		
			
RecallMinLevelGroup5_TableTennis(
			bStart:= PTM200StrippedTables[13].Signal, 
			nAddr:= 5, 
			eAddrType:= eDALIV2AddrTypeGroup, 
			stCommandBuffer:= stCommandBuffer );
TableTennisOff(
	bStart:= , 
	nAddr:= 55, 
	eAddrType:= eDALIV2AddrTypeShort,  
	stCommandBuffer:= stCommandBuffer);
//*******************************************************************************
		
	
/////////////////////////// Office Passage Occupancy handle //////////////////////////
IF 	Dali.StaffroomPIR_1_Occupancy OR Dali.StaffroomPIR_2_Occupancy  THEN
	OfficePassageTriggerOn 		:= TRUE;
	OfficePassageTriggerOFF		:= FALSE;
	OfficePassageTime.IN		:= FALSE;
END_IF

IF NOT Dali.StaffroomPIR_1_Occupancy AND NOT Dali.StaffroomPIR_2_Occupancy THEN
	OfficePassageTime.IN		:= TRUE;
	OfficePassageTime.PT		:= T#1H;	
END_IF

IF OfficePassageTime.Q OR ResetOthers THEN

	OfficePassageTriggerOn 		:= FALSE;
	OfficePassageTriggerOFF		:= TRUE;
END_IF
////////////////////////////////////////////////////////////////////////////////////

bLightADS := PTM200StrippedTables[3].Signal;
bLightsADSOff := 	PTM200StrippedTables[1].Signal;
bLightsADSOff := 	PTM200StrippedTables[0].Signal;

//All Board room on********************************************************************
BoardRoom_LightControl();	
//Board table spots****************************************************

	FOR i := 10 TO 11 DO
	FBDALIV2Light[i](
		bOn:= PTM200StrippedTables[3].Signal, 
		bOff:= PTM200StrippedTables[0].Signal, 
		bToggle:= , 
		nAddr:= i, 
		eAddrType:= 0, 
		nMasterDevAddr:= , 
		tCycleActualLevelMasterDev:= , 
		bLight=> , 
		stCommandBuffer:= stCommandBuffer );
	END_FOR	
	
	FOR i := 10 TO 11 DO
	FBDALIV2Light[i](
		bOn:= PTM200StrippedTables[3].Signal, 
		bOff:= PTM200StrippedTables[0].Signal, 
		bToggle:= , 
		nAddr:= i, 
		eAddrType:= 0, 
		nMasterDevAddr:= , 
		tCycleActualLevelMasterDev:= , 
		bLight=> , 
		stCommandBuffer:= stCommandBuffer );
	END_FOR	

				

	/////////////////////////// Office Passage Occupancy handle //////////////////////////
	IF 	Dali.CommunalAreaPIR_2_Occupancy AND NOT ReceptionTableKitchLoungeLightControl.bLight THEN
		ReceptionTableKitchLoungeTriggerOn 		:= TRUE;
		ReceptionTableKitchLoungeTriggerOFF		:= FALSE;
		ReceptionTableKitchLoungeTime.IN		:= FALSE;
	END_IF
	
	IF NOT Dali.CommunalAreaPIR_2_Occupancy  THEN
		ReceptionTableKitchLoungeTime.IN		:= TRUE;
		ReceptionTableKitchLoungeTime.PT		:= T#1H;	
	END_IF
	
	IF ReceptionTableKitchLoungeTime.Q OR ResetOthers THEN

		ReceptionTableKitchLoungeTriggerOn 		:= FALSE;
		ReceptionTableKitchLoungeTriggerOFF		:= TRUE;
	END_IF
	
	//Reception Kitch.lounge.table light control**********************************************************
		ReceptionTableKitchLoungeLightControl(
			bOn:= ReceptionTableKitchLoungeTriggerOn, 
			bOff:= ReceptionTableKitchLoungeTriggerOFF,
			nAddr:= 0, 
			eAddrType:= 1, 
			nMasterDevAddr:= , 
			bLight => ,
			tCycleActualLevelMasterDev:= , 
			stCommandBuffer:= stCommandBuffer);	
			
		RecallMinLevelGroup5_TableTennis(
			bStart:= ReceptionTableKitchLoungeTriggerOn, 
			nAddr:= 5, 
			eAddrType:= eDALIV2AddrTypeGroup, 
			stCommandBuffer:= stCommandBuffer );
			
		(*RecallMinLevelCouchLight(
			bStart:= ReceptionTableKitchLoungeTriggerOn, 
			nAddr:= 57, 
			eAddrType:= eDALIV2AddrTypeShort    , 
			stCommandBuffer:= stCommandBuffer );*)
		
		RecallStepUPCouchLight(
			bStart:= CouchLightStepUp, 
			nAddr:= 57, 
			eAddrType:= eDALIV2AddrTypeShort, 
			stCommandBuffer:= stCommandBuffer);
	
	
	IF ReceptionTableKitchLoungeTriggerOn THEN
		ReceptionTableKitchLoungeTriggerOn := FALSE;
		xXplanarScreenPowerOn := TRUE;	
	END_IF 		
	
	IF ReceptionTableKitchLoungeTriggerOff THEN
		ReceptionTableKitchLoungeTriggerOff := FALSE;
		
	END_IF 		
	
	////////////////////////////////////////////////////////////////////////////////////

	

	
	
	
]]></ST>
    </Implementation>
    <Action Name="BoardRoom_LightControl" Id="{ac116910-a881-45b7-a93b-548235819be2}">
      <Implementation>
        <ST><![CDATA[/////////////////////////// Boardroom area Occupancy handle //////////////////////////
IF 	Dali.BoardroomPIR_1_Occupancy OR Dali.BoardroomPIR_2_Occupancy THEN
	BoardRoomTriggerOn 		:= TRUE;
	BoardRoomTriggerOff		:= FALSE;
	BoardRoomTime.IN		:= FALSE;
END_IF

IF (NOT Dali.BoardroomPIR_2_Occupancy) OR (NOT Dali.BoardroomPIR_1_Occupancy) OR rt_BoardRoom_Lights_ProjectorMode.Q OR rt_BoardRoom_Lights_ShowroomMode.Q THEN
	BoardRoomTime.IN			:= TRUE;
	BoardRoomTime.PT			:= T#0.1H;	
END_IF

IF BoardRoomTime.Q OR ResetOthers OR rt_BoardRoom_Lights_Switch0.Q OR rt_BoardRoom_Lights_Switch1.Q THEN	//OR PTM200StrippedTables[1].Signal or PTM200StrippedTables[0].Signal 
	BoardRoomTriggerOn 		:= FALSE;
	BoardRoomTriggerOff		:= TRUE;
END_IF

//Showroom Board room on*********************************************

rt_BoardRoom_Lights_ShowroomMode(CLK := xBoardToom_Lights_ShowroomMode);

IF  rt_BoardRoom_Lights_ShowroomMode.Q THEN
	xBoardToom_Lights_ShowroomMode := FALSE;
	BoardRoomTriggerOn		:= TRUE;
	BoardRoomTriggerOff		:= FALSE;
	BoardRoomTime.IN		:= FALSE;
END_IF

FBDALIV2Dimmer1SwitchBoarda(
	bSwitchDimm:= , 
	bOn:= PTM200StrippedTables[2].Signal OR BoardRoomTriggerOn, 
	bOff:= PTM200StrippedTables[0].Signal OR BoardRoomTriggerOff OR rt_BoardRoom_Lights_ProjectorMode.Q , 
	nAddr:= 3, 
	eAddrType:= 1, 
	stCommandBuffer:= stCommandBuffer); 

FBDALIV2Dimmer1SwitchBoardb(
	bSwitchDimm:= , 
	bOn:= PTM200StrippedTables[2].Signal OR BoardRoomTriggerOn, 
	bOff:= PTM200StrippedTables[0].Signal OR BoardRoomTriggerOff, 
	nAddr:= 2, 
	eAddrType:= 1, 
	stCommandBuffer:= stCommandBuffer );	



//Projector Board room on*********************************************

rt_BoardRoom_Lights_ProjectorMode(CLK := xBoardToom_Lights_ProjectorMode);

IF  rt_BoardRoom_Lights_ProjectorMode.Q THEN
	xBoardToom_Lights_ProjectorMode := FALSE;
	BoardRoomTriggerOff		:= FALSE;
	BoardRoomTime.IN		:= FALSE;
END_IF

FBDALIV2Dimmer1SwitchBoardc(
	bSwitchDimm:= , 
	bOn:= rt_BoardRoom_Lights_ShowroomMode.Q, 
	bOff:= PTM200StrippedTables[1].Signal OR rt_BoardRoom_Lights_ProjectorMode.Q OR BoardRoomTriggerOff, //Bottom Left Switch
	nAddr:= 3, 
	eAddrType:= 1, 
	stCommandBuffer:= stCommandBuffer );

FBDALIV2Dimmer1SwitchBoardd(
	bSwitchDimm:= , 
	bOn:= PTM200StrippedTables[3].Signal OR rt_BoardRoom_Lights_ProjectorMode.Q, //Bottom Right Switch
	bOff:= PTM200StrippedTables[1].Signal or BoardRoomTriggerOff,  //Bottom Left Switch
	nAddr:= 2, 
	eAddrType:= 1, 
	stCommandBuffer:= stCommandBuffer );
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ReceptionDoor_LightControl" Id="{0f0141a0-0212-4e00-aeaa-81885379793f}">
      <Implementation>
        <ST><![CDATA[//Reception Door light control**********************************************************
IF NOT IgnoreFront THEN

		ReceptionDoorLightControl(
			bOn:= ReceptionDoorTriggerOn, 
			bOff:= , //ReceptionDoorTriggerOFF
			nAddr:= 24, 
			eAddrType:= 0, 
			nMasterDevAddr:= , 
			tCycleActualLevelMasterDev:= , 
			stCommandBuffer:= stCommandBuffer);	

	/////////////////////////// Reception Door  Occupancy handle //////////////////////////
	IF 	Dali.CommunalAreaPIR_1_Occupancy  THEN
		
		ReceptionDoorTriggerOn 		:= TRUE;
		ReceptionDoorTriggerOFF		:= FALSE;
		ReceptionDoorTime.IN		:= FALSE;
		TurnOnCabinetLights			:= TRUE;
		
	END_IF
	
	IF NOT Dali.CommunalAreaPIR_1_Occupancy  THEN
		ReceptionDoorTime.IN		:= TRUE;
		ReceptionDoorTime.PT		:= T#3600S;	
	END_IF
	
	IF ReceptionDoorTime.Q OR ResetOthers THEN
		TurnOnCabinetLights := FALSE;
		ReceptionDoorTriggerOn 		:= FALSE;
		ReceptionDoorTriggerOFF		:= TRUE;
	END_IF
	//***************************************************************************************

	
END_IF	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ReceptionPassage_LightControl" Id="{7e7993cd-0bc6-4ef5-a823-9bb0caff04d4}">
      <Implementation>
        <ST><![CDATA[//Reception Passage light control**********************************************************
		ReceptionPassageLightControl(
			bOn:= ReceptionPassageTriggerOn, 
			bOff:= ReceptionPassageTriggerOFF,
			nAddr:= 6, 
			eAddrType:= 1, 
			nMasterDevAddr:= , 
			tCycleActualLevelMasterDev:= , 
			stCommandBuffer:= stCommandBuffer);	

	/////////////////////////// Reception Passage  Occupancy handle //////////////////////////
	IF 	Dali.StaffroomPIR_1_Occupancy OR Dali.StaffroomPIR_2_Occupancy OR Dali.CommunalAreaPIR_2_Occupancy THEN
		ReceptionPassageTriggerOn 			:= TRUE;
		ReceptionPassageTriggerOFF			:= FALSE;
		ReceptionPassageTime.IN				:= FALSE;
	END_IF
	
	IF NOT Dali.StaffroomPIR_1_Occupancy AND NOT Dali.StaffroomPIR_2_Occupancy AND NOT Dali.CommunalAreaPIR_2_Occupancy THEN
		ReceptionPassageTime.IN				:= TRUE;
		ReceptionPassageTime.PT				:= T#3600S;	
	END_IF
	
	IF ReceptionPassageTime.Q OR ResetOthers THEN
	
		ReceptionPassageTriggerOn 			:= FALSE;
		ReceptionPassageTriggerOFF			:= TRUE;
	END_IF
	//***************************************************************************************]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="LightControl">
      <LineId Id="4453" Count="403" />
      <LineId Id="4909" Count="95" />
      <LineId Id="75" Count="0" />
    </LineIds>
    <LineIds Name="LightControl.BoardRoom_LightControl">
      <LineId Id="62" Count="12" />
      <LineId Id="76" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="84" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="2" Count="15" />
      <LineId Id="33" Count="26" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="LightControl.ReceptionDoor_LightControl">
      <LineId Id="2" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="3" Count="9" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="17" Count="7" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="1" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="36" Count="2" />
    </LineIds>
    <LineIds Name="LightControl.ReceptionPassage_LightControl">
      <LineId Id="2" Count="22" />
      <LineId Id="28" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>