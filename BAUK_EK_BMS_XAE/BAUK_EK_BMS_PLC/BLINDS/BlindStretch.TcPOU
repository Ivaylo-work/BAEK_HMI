<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BlindStretch" Id="{1a6ca91a-bad4-4a95-abc1-c30e5836bd97}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BlindStretch
VAR_INPUT
	Start					: BOOL;
END_VAR                 	  
VAR_OUTPUT              	  
	Err						: BOOL;
END_VAR                 	  
VAR               
	UpdateInterval			:BYTE;      	  
	fbBlindsControl			: BlindControl;
	GetBusyBitOffice		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	GetBusyBitKitchen		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	GetBusyBitBoardroom		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	                    	  
	BusyOffice				: BOOL;
	BusyKitchen				: BOOL;
	BusyBoardroom			: BOOL;
	
	BlindSelector			:INT;
	                    	  
	TonError				: Ton := (PT := T#30S);
	TonUpCommand			: Ton;
	TonDownCommand			: Ton;
	
	nState					: INT;
END_VAR

VAR_IN_OUT
	StretchDone				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[UpdateInterval := UpdateInterval + 1;

		GetBusyBitOffice(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6B7F9,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyOffice),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );
			
		GetBusyBitKitchen(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6B819,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyKitchen),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );
			
		GetBusyBitBoardroom(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6B839,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyBoardroom),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );
		

IF Start THEN

CASE nState OF
	0: //Check Busy state if busy for 30+s 100 err or 10

		
		BlindSelector := 0;
		nState := 10;

	10://Select room to be stretched 11 -> offce 12 -> kitchen 13 -> board room
		IF (NOT BusyOffice AND NOT BusyKitchen AND NOT BusyBoardroom) THEN
			//state 10
			TonError.IN := FALSE;
			nState := 11;
			
		ELSE
			//timer for 30 sec -> state 100
			TonError.IN := TRUE;
			IF TonError.Q THEN
				nState := 100;
			END_IF
			
		END_IF
	11://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
		//BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[7] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[8] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[9] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[10] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[11] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[12] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[13] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[14] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[15] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[16] := TRUE;

		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[7] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[8] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[9] := TRUE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[10] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[11] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[12] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[13] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[14] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[15] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[16] := TRUE;
		
		nState := 20;
		
	12://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[7] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[8] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[9] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[10] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[11] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[12] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[13] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[14] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[15] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[16] := FALSE;

		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[7] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[8] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[9] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[10] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[11] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[12] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[13] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[14] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[15] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[16] := FALSE;
		
		nState := 20;
		
	13://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[7] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[8] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[9] := FALSE; 
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[10] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[11] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[12] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[13] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[14] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[15] := FALSE;
//		BackgroundComms.BlindCommandTable[BlindSelector].SelectBlindsBulkCommand[16] := FALSE;

		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[1] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[2] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[3] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[4] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[5] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[6] := TRUE;  
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[7] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[8] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[9] := FALSE; 
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[10] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[11] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[12] := FALSE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[13] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[14] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[15] := TRUE;
		BlindCX7000UserTable[BlindSelector].SelectBlindsBulkCommand[16] := FALSE;
		
		nState := 20;
	20://Strech up for X seconds
		TonUpCommand.IN := TRUE;
		TonUpCommand.PT := T#90S;

		BlindCX7000UserTable[BlindSelector].xCommandUp := TRUE;
		IF(BusyOffice) THEN
			BlindCX7000UserTable[BlindSelector].xCommandUp := FALSE;
		END_IF
		
		IF TonUpCommand.Q THEN
			BlindCX7000UserTable[BlindSelector].xCommandUp := FALSE;
			BlindCX7000UserTable[BlindSelector].xCommandStop := TRUE;
			IF(BusyOffice) THEN
				BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
			END_IF
			BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
			//TonUpCommand.IN := FALSE;
			//nState := 21;
		END_IF

	21://Check if busy
		IF BlindSelector = 0 THEN
			IF NOT BusyOffice THEN
				nState := 30;
			END_IF
		ELSIF BlindSelector = 1 THEN
			IF NOT BusyKitchen THEN
				nState := 30;
			END_IF
		ELSIF BlindSelector = 2 THEN
			IF NOT BusyBoardroom THEN
				nState := 30;
			END_IF
		END_IF 
	30://Strech down for Y seconds
		TonDownCommand.IN := TRUE;
		TonDownCommand.PT := T#90S;
		//BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
		BlindCX7000UserTable[BlindSelector].xCommandDown := TRUE;
		BlindCX7000UserTable[BlindSelector].xCommandDown := FALSE;
		IF TonDownCommand.Q THEN
			BlindCX7000UserTable[BlindSelector].xCommandDown := FALSE;
			BlindCX7000UserTable[BlindSelector].xCommandStop := TRUE;
			BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
			TonDownCommand.IN := FALSE;
			nState := 31;
		END_IF
//		nState := 31;
	31://Check if Busy
		IF BlindSelector = 0 THEN
			IF NOT BusyOffice THEN
				nState := 40;
			END_IF
		ELSIF BlindSelector = 1 THEN
			IF NOT BusyKitchen THEN
				nState := 40;
			END_IF
		ELSIF BlindSelector = 2 THEN
			IF NOT BusyBoardroom THEN
				nState := 40;
			END_IF
		END_IF 
	40://Strech up for X seconds
		TonUpCommand.IN := TRUE;
		TonUpCommand.PT := T#30S;
		BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
		BlindCX7000UserTable[BlindSelector].xCommandUp := TRUE;
		BlindCX7000UserTable[BlindSelector].xCommandUp := FALSE;
		IF TonUpCommand.Q THEN
			BlindCX7000UserTable[BlindSelector].xCommandUp := FALSE;
			BlindCX7000UserTable[BlindSelector].xCommandStop := TRUE;
			BlindCX7000UserTable[BlindSelector].xCommandStop := FALSE;
			TonUpCommand.IN := FALSE;
			nState := 41;
		END_IF
//		nState := 41;
	41://Check if busy
		IF BlindSelector = 0 THEN
			IF NOT BusyOffice THEN
				BlindSelector := 1;
				nState := 12;
			END_IF
		ELSIF BlindSelector = 1 THEN
			IF NOT BusyKitchen THEN
				BlindSelector := 2;
				nState := 13;
			END_IF
		ELSIF BlindSelector = 2 THEN
			IF NOT BusyBoardroom THEN
				StretchDone := TRUE;
				nState := 0;
			END_IF
		END_IF 
	100://Err handling
	
END_CASE
	
//time out strech up

//time out strech down

//time out stretch up
	
END_IF
//HowOftenTimer();
TonError();
TonUpCommand();
TonDownCommand();]]></ST>
    </Implementation>
    <LineIds Name="BlindStretch">
      <LineId Id="426" Count="0" />
      <LineId Id="430" Count="41" />
      <LineId Id="429" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="97" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="280" Count="2" />
      <LineId Id="284" Count="8" />
      <LineId Id="114" Count="1" />
      <LineId Id="396" Count="16" />
      <LineId Id="264" Count="15" />
      <LineId Id="263" Count="0" />
      <LineId Id="296" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="380" Count="15" />
      <LineId Id="133" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="305" Count="14" />
      <LineId Id="304" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="150" Count="16" />
      <LineId Id="348" Count="0" />
      <LineId Id="324" Count="16" />
      <LineId Id="323" Count="0" />
      <LineId Id="167" Count="2" />
      <LineId Id="417" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="472" Count="1" />
      <LineId Id="418" Count="0" />
      <LineId Id="171" Count="2" />
      <LineId Id="475" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="175" Count="16" />
      <LineId Id="413" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="193" Count="2" />
      <LineId Id="420" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="197" Count="16" />
      <LineId Id="415" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="215" Count="2" />
      <LineId Id="422" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="219" Count="2" />
      <LineId Id="294" Count="0" />
      <LineId Id="222" Count="3" />
      <LineId Id="295" Count="0" />
      <LineId Id="226" Count="3" />
      <LineId Id="341" Count="0" />
      <LineId Id="230" Count="16" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>