<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BlindStretch" Id="{1a6ca91a-bad4-4a95-abc1-c30e5836bd97}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BlindStretch
VAR_INPUT
	Start					: BOOL;
END_VAR                 	  
VAR_OUTPUT              	  
	Err						: BOOL;
END_VAR                 	  
VAR               
	UpdateInterval			: BYTE;      	  
	fbBlindsControl			: BlindControl;
	GetBusyBitOffice		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	GetBusyBitKitchen		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	GetBusyBitBoardroom		: ADSREADEX := ( NETID := '5.129.86.232.1.1', PORT := 851, TMOUT := T#5S );
	                    	  
	BusyOffice				: BOOL;
	BusyKitchen				: BOOL;
	BusyBoardroom			: BOOL;
	
	testInt					: int;
	
	BusyBits				: ARRAY[0..2] OF BOOL;
	
	
	
	BlinderSelection		: INT;
	
	BlindSelector			: INT;
	                    	  
	TonError				: Ton := (PT := T#30S);
	TonUpCommand			: Ton;
	TonDownCommand			: Ton;
	
	iState					: INT;
END_VAR

VAR_IN_OUT
	StretchDone				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[UpdateInterval := UpdateInterval + 1;

		GetBusyBitOffice(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6DD89,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyBits[0]),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );
			
		GetBusyBitBoardroom(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6DDA9,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyBits[1]),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );
			
		GetBusyBitKitchen(
			NETID:= '5.129.86.232.1.1',
			PORT:= 851 ,
			IDXGRP:=16#4040,//16#4020 ,
			IDXOFFS:= 16#6DDC9,//0,
			LEN:= 4,//40,
			DESTADDR:= ADR(BusyBits[2]),
			READ:= UpdateInterval.0,
			TMOUT:= t#5s,
			BUSY=> ,
			ERR=> ,
			ERRID=> ,
			COUNT_R=> );		

IF Start THEN

CASE iState OF
	0: //Check Busy state if busy for 30+s 100 err or 10

		BlindSelector := 0;
		BlinderSelection := 0;
		iState := 10;

	10://Select room to be stretched 11 -> offce 12 -> kitchen 13 -> board room
		IF (NOT BusyBits[0] AND NOT BusyBits[1] AND NOT BusyBits[2]) THEN
			//state 10
			TonError.IN := FALSE;
			iState := 11;
			
		ELSE
			//timer for 30 sec -> state 100
			TonError.IN := TRUE;
			IF TonError.Q THEN
				iState := 100;
			END_IF
			
		END_IF
	11://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[1] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[2] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[3] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[4] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[5] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[6] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[7] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[8] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[9] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[10] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[11] := True;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[12] := True;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[13] := True;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[14] := True;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[15] := True;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[16] := True;
		
		iState := 20;
		
	12://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[1] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[2] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[3] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[4] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[5] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[6] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[7] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[8] := True; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[9] := True; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[10] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[11] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[12] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[13] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[14] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[15] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[16] := TRUE;
		
		iState := 20;
		
	13://Select individual blinds -> 20 stretch up -> 21 check -> 30 strech down -> 31 check -> 40 stretch up -> 41 check
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[1] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[2] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[3] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[4] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[5] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[6] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[7] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[8] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[9] := TRUE; 
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[10] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[11] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[12] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[13] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[14] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[15] := TRUE;
		BlindCX7000UserTable[BlinderSelection].SelectBlindsBulkCommand[16] := TRUE;
		
		iState := 20;
	20://Strech up for X seconds
		TonUpCommand.IN := TRUE;
		TonUpCommand.PT := T#30S;

		IF NOT BusyBits[BlinderSelection] THEN
			BlindCX7000UserTable[BlinderSelection].xCommandUp := TRUE;
		ELSE
			BlindCX7000UserTable[BlinderSelection].xCommandUp := FALSE;
			iState := 201;
		END_IF
		
	201:
		IF TonUpCommand.Q THEN
			IF NOT BusyBits[BlinderSelection] THEN
				BlindCX7000UserTable[BlinderSelection].xCommandStop := TRUE;
			ELSE
				BlindCX7000UserTable[BlinderSelection].xCommandStop := FALSE;
				TonUpCommand.IN := FALSE;
				iState := 21;
			END_IF
		END_IF
		
	202:
		IF NOT BusyBits[BlinderSelection] THEN
			BlindCX7000UserTable[BlinderSelection].xCommandStop := TRUE;
		ELSE
			BlindCX7000UserTable[BlinderSelection].xCommandStop := FALSE;
			iState := 8;
		END_IF

	21://Check if busy
		IF BlinderSelection = 0 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 30;
			END_IF
		ELSIF BlinderSelection = 1 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 30;
			END_IF
		ELSIF BlinderSelection = 2 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 30;
			END_IF
		END_IF 
	30://Strech down for Y seconds
		TonDownCommand.IN := TRUE;
		TonDownCommand.PT := T#30S;
		
		IF NOT BusyBits[BlinderSelection] THEN
			BlindCX7000UserTable[BlinderSelection].xCommandDown := TRUE;
		ELSE
			BlindCX7000UserTable[BlinderSelection].xCommandDown := FALSE;
			iState := 301;
		END_IF	
		
	301:
		IF TonDownCommand.Q THEN
			IF NOT BusyBits[BlinderSelection] THEN
				BlindCX7000UserTable[BlinderSelection].xCommandStop := TRUE;
			ELSE
				BlindCX7000UserTable[BlinderSelection].xCommandStop := FALSE;
				TonDownCommand.IN := FALSE;
				iState := 31;
			END_IF
		END_IF
	
		
//		nState := 31;
	31://Check if Busy
		IF BlinderSelection = 0 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 40;
			END_IF
		ELSIF BlinderSelection = 1 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 40;
			END_IF
		ELSIF BlinderSelection = 2 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				iState := 40;
			END_IF
		END_IF 
	40://Strech up for X seconds
		TonUpCommand.IN := TRUE;
		TonUpCommand.PT := T#30S;
		IF NOT BusyBits[BlinderSelection] THEN
			BlindCX7000UserTable[BlinderSelection].xCommandUp := TRUE;
		ELSE
			BlindCX7000UserTable[BlinderSelection].xCommandUp := FALSE;
			iState := 401;
		END_IF
	
	401:
		IF TonUpCommand.Q THEN
			IF NOT BusyBits[BlinderSelection] THEN
				BlindCX7000UserTable[BlinderSelection].xCommandStop := TRUE;
			ELSE
				BlindCX7000UserTable[BlinderSelection].xCommandStop := FALSE;
				TonUpCommand.IN := FALSE;
				iState := 41;
			END_IF
		END_IF	
		
	41://Check if busy
		IF BlinderSelection = 0 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				BlinderSelection := 1;
				iState := 12;
			END_IF
		ELSIF BlinderSelection = 1 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				BlinderSelection := 2;
				iState := 13;
			END_IF
		ELSIF BlinderSelection = 2 THEN
			IF NOT BusyBits[BlinderSelection] THEN
				StretchDone := TRUE;
				iState := 0;
			END_IF
		END_IF 
	100://Err handling
	
END_CASE
	
//time out strech up

//time out strech down

//time out stretch up
	
END_IF
//HowOftenTimer();
TonError();
TonUpCommand();
TonDownCommand();]]></ST>
    </Implementation>
    <LineIds Name="BlindStretch">
      <LineId Id="537" Count="14" />
      <LineId Id="566" Count="13" />
      <LineId Id="965" Count="0" />
      <LineId Id="967" Count="11" />
      <LineId Id="966" Count="0" />
      <LineId Id="581" Count="4" />
      <LineId Id="587" Count="1" />
      <LineId Id="995" Count="0" />
      <LineId Id="589" Count="16" />
      <LineId Id="829" Count="14" />
      <LineId Id="828" Count="0" />
      <LineId Id="640" Count="3" />
      <LineId Id="846" Count="14" />
      <LineId Id="844" Count="0" />
      <LineId Id="677" Count="3" />
      <LineId Id="863" Count="14" />
      <LineId Id="861" Count="0" />
      <LineId Id="714" Count="4" />
      <LineId Id="879" Count="3" />
      <LineId Id="884" Count="1" />
      <LineId Id="878" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="895" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="906" Count="1" />
      <LineId Id="901" Count="0" />
      <LineId Id="908" Count="1" />
      <LineId Id="902" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="910" Count="1" />
      <LineId Id="913" Count="3" />
      <LineId Id="919" Count="0" />
      <LineId Id="912" Count="0" />
      <LineId Id="735" Count="17" />
      <LineId Id="927" Count="0" />
      <LineId Id="920" Count="4" />
      <LineId Id="755" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="938" Count="7" />
      <LineId Id="937" Count="0" />
      <LineId Id="930" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="763" Count="17" />
      <LineId Id="949" Count="4" />
      <LineId Id="783" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="955" Count="7" />
      <LineId Id="948" Count="0" />
      <LineId Id="946" Count="0" />
      <LineId Id="792" Count="2" />
      <LineId Id="996" Count="0" />
      <LineId Id="796" Count="3" />
      <LineId Id="997" Count="0" />
      <LineId Id="801" Count="21" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>