<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PrgMqttCom_PM_Subscriber" Id="{fb45282b-221b-41b9-b270-b0c4ec652b09}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PrgMqttCom_PM_Subscriber
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* received message *)	
	bSubscribedActivePower : BOOL;
	sTopicActivePower : STRING(255) := 'Active_Power';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadActivePower : STRING(255);
	
	bSubscribedCurrent : BOOL;
	sTopicCurrent : STRING(255) := 'Current';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadCurrent : STRING(255);

	bSubscribedVoltage : BOOL;
	sTopicVoltage : STRING(255) := 'Voltage';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadVoltage : STRING(255);

	bSubscribedApparentPower : BOOL;	
	sTopicApparentPower	: STRING(255) := 'Apparent_Power';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadApparentPower : STRING(255);

	bSubscribedReactivePower : BOOL;	
	sTopicReactivePower	: STRING(255) := 'Reactive_Power';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadReactivePower : STRING(255);

	bSubscribedPositiveEnergy : BOOL;	
	sTopicPositiveEnergy	: STRING(255) := 'Positive_Energy';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadPositiveEnergy : STRING(255);

	bSubscribedCosPhi : BOOL;
	sTopicCosPhi	: STRING(255) := 'cosPhi';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadCosPhi : STRING(255);	

	bSubscribedFrequency : BOOL;	
	sTopicFrequency	: STRING(255) := 'Frequency';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadFrequency : STRING(255);
	
	bSubscribedNegativeEnergy : BOOL;
	sTopicNegativeEnergy	: STRING(255) := 'Negative_Energy';
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadNegativeEnergy : STRING(255);		
	
	powerData				:	ST_EL3403_Data;
	scaledPowerData			:	ST_EL3403_Data;
		
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
	bSetParameter := FALSE;
	fbMqttClient.sHostName:= '10.199.143.2';
	fbMqttClient.nHostPort:= 1883;
	fbMqttClient.sClientId:= 'CX2040_Power_Monitoring'; 
	fbMqttClient.sTopicPrefix:= ''; 
	fbMqttClient.nKeepAlive:= 60; 
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect);
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		IF fbMessage.CompareTopic(sTopic := sTopicVoltage) THEN
			fbMessage.GetPayload(pPayload:=ADR(sPayloadVoltage), nPayloadSize:=SIZEOF(sPayloadVoltage), bSetNullTermination:=FALSE);
        	powerData.voltage := STRING_TO_REAL(sPayloadVoltage);
			
		ELSIF fbMessage.CompareTopic(sTopic:=sTopicCurrent) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadCurrent), nPayloadSize:=SIZEOF(sPayloadCurrent), bSetNullTermination:=FALSE);
        	powerData.current := STRING_TO_REAL(sPayloadCurrent);
			
		ELSIF fbMessage.CompareTopic(sTopic:=sTopicActivePower) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadActivePower), nPayloadSize:=SIZEOF(sPayloadActivePower), bSetNullTermination:=FALSE);
        	powerData.activePower := STRING_TO_REAL(sPayloadActivePower);

		ELSIF fbMessage.CompareTopic(sTopic:=sTopicReactivePower) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadReactivePower), nPayloadSize:=SIZEOF(sPayloadReactivePower), bSetNullTermination:=FALSE);
        	powerData.reactivePower := STRING_TO_REAL(sPayloadReactivePower);
						
		ELSIF fbMessage.CompareTopic(sTopic:=sTopicApparentPower) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadApparentPower), nPayloadSize:=SIZEOF(sPayloadApparentPower), bSetNullTermination:=FALSE);
        	powerData.apparentPower := STRING_TO_REAL(sPayloadApparentPower);
			
		ELSIF fbMessage.CompareTopic(sTopic:=sTopicFrequency) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadFrequency), nPayloadSize:=SIZEOF(sPayloadFrequency), bSetNullTermination:=FALSE);
        	powerData.frequency := STRING_TO_REAL(sPayloadFrequency);

		ELSIF fbMessage.CompareTopic(sTopic:=sTopicPositiveEnergy) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadPositiveEnergy), nPayloadSize:=SIZEOF(sPayloadPositiveEnergy), bSetNullTermination:=FALSE);
        	powerData.positiveEnergy := STRING_TO_REAL(sPayloadPositiveEnergy);
			
		ELSIF fbMessage.CompareTopic(sTopic:=sTopicNegativeEnergy) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadNegativeEnergy), nPayloadSize:=SIZEOF(sPayloadNegativeEnergy), bSetNullTermination:=FALSE);
        	powerData.negativeEnergy := STRING_TO_REAL(sPayloadNegativeEnergy);

		ELSIF fbMessage.CompareTopic(sTopic:=sTopicCosPhi) THEN
            fbMessage.GetPayload(pPayload:=ADR(sPayloadCosPhi), nPayloadSize:=SIZEOF(sPayloadCosPhi), bSetNullTermination:=FALSE);
        	powerData.cosPhi := STRING_TO_REAL(sPayloadCosPhi);								
		END_IF
	END_IF
END_IF

IF fbMqttClient.bConnected THEN
	IF NOT bSubscribedVoltage THEN
		bSubscribedVoltage := fbMqttClient.Subscribe(sTopic:=sTopicVoltage, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF	

	IF NOT bSubscribedCurrent THEN
		bSubscribedCurrent := fbMqttClient.Subscribe(sTopic:=sTopicCurrent, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedActivePower THEN
		bSubscribedActivePower := fbMqttClient.Subscribe(sTopic:=sTopicActivePower, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF

	IF NOT bSubscribedApparentPower THEN
		bSubscribedApparentPower := fbMqttClient.Subscribe(sTopic:=sTopicApparentPower, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedReactivePower THEN
		bSubscribedApparentPower := fbMqttClient.Subscribe(sTopic:=sTopicReactivePower, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedPositiveEnergy THEN
		bSubscribedPositiveEnergy := fbMqttClient.Subscribe(sTopic:=sTopicPositiveEnergy, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedCosPhi THEN
		bSubscribedCosPhi := fbMqttClient.Subscribe(sTopic:=sTopicCosPhi, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedFrequency THEN
		bSubscribedFrequency := fbMqttClient.Subscribe(sTopic:=sTopicFrequency, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	
	IF NOT bSubscribedNegativeEnergy THEN
		bSubscribedNegativeEnergy := fbMqttClient.Subscribe(sTopic:=sTopicNegativeEnergy, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
END_IF

PowerScaling();]]></ST>
    </Implementation>
    <Method Name="PowerScaling" Id="{ae4c9b02-b02b-494e-bec0-e6b53b794c37}">
      <Declaration><![CDATA[METHOD PowerScaling : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Scaled to A
scaledPowerData.current         := (powerData.current * 0.000001 * 10); 

//Scaled to Vac        
scaledPowerData.voltage         := (powerData.voltage * 0.0001);  

//Scaled to Hz      
scaledPowerData.frequency       := (powerData.frequency * 0.1);    

//Scaled to W
scaledPowerData.activePower     := (powerData.activePower * 0.01);   

//Scaled to W  
scaledPowerData.apparentPower   := (powerData.apparentPower * 0.01); 

//Scaled to VAr  
scaledPowerData.reactivePower   := (powerData.reactivePower * 0.01);  

//Scaled to Wh  
scaledPowerData.positiveEnergy  := ((powerData.positiveEnergy * 0.001)*10);  

//Scaled to WH 
scaledPowerData.negativeEnergy  := (powerData.negativeEnergy * 0.001);  

//Power factor
scaledPowerData.cosPhi			:= (powerData.cosPhi * 0.001);			       ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PrgMqttCom_PM_Subscriber">
      <LineId Id="168" Count="6" />
      <LineId Id="179" Count="1" />
      <LineId Id="320" Count="19" />
      <LineId Id="457" Count="2" />
      <LineId Id="343" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="463" Count="10" />
      <LineId Id="461" Count="0" />
      <LineId Id="474" Count="2" />
      <LineId Id="478" Count="3" />
      <LineId Id="345" Count="20" />
      <LineId Id="482" Count="5" />
      <LineId Id="372" Count="8" />
      <LineId Id="488" Count="0" />
      <LineId Id="490" Count="5" />
      <LineId Id="489" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="498" Count="5" />
      <LineId Id="497" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="506" Count="5" />
      <LineId Id="505" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="514" Count="5" />
      <LineId Id="513" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="522" Count="5" />
      <LineId Id="521" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="545" Count="0" />
    </LineIds>
    <LineIds Name="PrgMqttCom_PM_Subscriber.PowerScaling">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>